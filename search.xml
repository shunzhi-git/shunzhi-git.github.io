<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构基本概念</title>
    <url>/2021/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<hr>
<h2 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h2><h4 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h4><p>相互直接存在一种或者多种特定关系的数据组合，其分为逻辑结构和物理结构。</p>
<h4 id="逻辑结构："><a href="#逻辑结构：" class="headerlink" title="逻辑结构："></a>逻辑结构：</h4><p>数据对象中元素的相互关系，其分为集合结构、线性结构、树形结构和图像结构。</p>
<h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><p>数据的结构在计算机中的存储形式，其分为顺序存储结构和链式存储结构，其区别是在存储单元中地址是否连续。</p>
<h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><p>是指一组性质相同的值的集合及定义在此集合上的一些操作的总称，其分为原子类型（包括整型、字符型等）和结构类型。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>算法基础概念</title>
    <url>/2021/08/08/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<hr>
<h2 id="算法基本概念"><a href="#算法基本概念" class="headerlink" title="算法基本概念"></a>算法基本概念</h2><h4 id="算法定义："><a href="#算法定义：" class="headerlink" title="算法定义："></a>算法定义：</h4><p>算法是解决特定问题求解步骤的描述，在计算机中是指令的有限序列，并且每条指令表示一个或多个操作。</p>
<h4 id="算法特性："><a href="#算法特性：" class="headerlink" title="算法特性："></a>算法特性：</h4><p>有穷性性、确定性、可行性、输入、输出。</p>
<h4 id="算法设计要求："><a href="#算法设计要求：" class="headerlink" title="算法设计要求："></a>算法设计要求：</h4><p>正确性、可读性、健壮性、高效率和低存储量需求。</p>
<h4 id="算法度量方法："><a href="#算法度量方法：" class="headerlink" title="算法度量方法："></a>算法度量方法：</h4><ul>
<li><p>事后统计法、事前分析估算法，评估一个算法的性能不仅和算法本身复杂度有关，和数据量也有密切关系。</p>
</li>
<li><p>事前分析算法复杂度评估方法：对于复杂算法，算法复杂度一般是算法函数最高阶项。</p>
</li>
<li><p>常见算法复杂度耗时排序：O(1) &lt; O(log n) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>团队管理</title>
    <url>/2021/08/14/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h3><p>团队管理分为三个层面，技术、制度和文化。大到一个国家，小到个人，最终发展的结果都是这个三个层面的产物。其中技术发展的基础，制度是可持续的发展的必要条件，而文化则决定了最终可以发展到什么程度，能够走多远。</p>
<span id="more"></span>

<p>以技术型公司发展为例，技术是驱动创业的基本条件，有了核心或者创新型的技术，一个公司才可以立足，然后将技术转化成产品，从而获取利润。技术发展是个漫长的过程，其包括技术的积累、创新和传承等。每个环节都要持续不断的更新，从而避免被淘汰出局。技术创新，有一定的风险，既要避免走弯路，也要勇于尝试。</p>
<p>良好的制度可以促进公司的发展，激发员工的潜力。通俗的讲，制度就是一个小圈子或者是小团体的内部规则秩序，用来约束人员的行为规范，方便驯化和管理。公平公正的制度可以计划个人的创造力，反之则会滋生腐败和各种潜规则。</p>
<p>最后一个层面就是文化，文化是渗透到骨子里的东西，是潜移默化的一个结果，是一个群体大家都是认可的价值观念。文化的形成有个很慢长的过程，一旦成型，想要再次改变将是一个更漫长的过程。</p>
]]></content>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2021/08/31/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="一、线性表相关概念"><a href="#一、线性表相关概念" class="headerlink" title="一、线性表相关概念"></a>一、线性表相关概念</h1><h3 id="1-线性表的定义："><a href="#1-线性表的定义：" class="headerlink" title="1. 线性表的定义："></a>1. 线性表的定义：</h3><p>零个或多个元素的有限序列。</p>
<h3 id="2-线性表的存储结构："><a href="#2-线性表的存储结构：" class="headerlink" title="2. 线性表的存储结构："></a>2. 线性表的存储结构：</h3><ul>
<li>顺序存储结构</li>
<li>链式存储结构：单链表、静态链表、双链表、循环链表。</li>
<li>顺序和链式存储结构不同点主要在地址是否连续，这个特点也决定了其各种操作的算法复杂度。</li>
</ul>
<h3 id="3-线性表的操作"><a href="#3-线性表的操作" class="headerlink" title="3. 线性表的操作"></a>3. 线性表的操作</h3><ul>
<li>整表创建，整表删除，元素获取，元素插入，元素删除<span id="more"></span></li>
</ul>
<h1 id="二、线性表的顺序存储结构："><a href="#二、线性表的顺序存储结构：" class="headerlink" title="二、线性表的顺序存储结构："></a>二、线性表的顺序存储结构：</h1><p>用一段连续的存储单元依次存储线性表的数据元素，数组、字符串都属于顺序存储结构。</p>
<pre><code>

/*********************************************************************
*时间：2021/08/23 22:33
*地点：滨成科创公寓
*作者：liu shun zhi
*功能：线性表顺序存储
*
*********************************************************************/


/*
*定义函数返回值
*/
#define OK           (0)
#define ERROR        (-1)
#define ELEM_MAX_NUM (10)

/*
*线性表结构体类型
*/
struct list
&#123;
        int length;
        int data[ELEM_MAX_NUM];
&#125;;

/*
*获取顺序结构线性表L的第i个元素。
*/
int get_list_elem(list L, int i, int *e)
&#123;
        if (L.length == 0 || i >= L.length )
                return ERROR;

        *e = L.data[i];
        return OK;
&#125;

/*
*插入顺序结构线性表L的第i个元素。
*/
int insert_list_elem(list L, int i, int e)
&#123;
        int k;

        if (L.length == 0 || i >= L.length)
                return ERROR;

        for (int k = L.length; k > i; k--)
        &#123;
                L.data[k] = L.data[k-1]
        &#125;

        L.length++;
        L.data[k] = e;

        return OK;
&#125;

/*
*删除顺序结构线性表L的第i个元素。
*/
int delete_list_elem(list L, int i)
&#123;
        int k;

        if (L.length == 0 || i >= L.length)
                return ERROR;

        for (int k = i; k < L.length; k++)
        &#123;
                L.data[k] = L.data[k+1]
        &#125;

        L.length--;

        return OK;
&#125;

/*
*输入字符串原地逆置。
*/
int sort_string(char *string)
&#123;
        int len,i;
        char *start = string;
        char *end = string - 1;
        char p;

        while (start < end)
        &#123;
                p = *start;
                *start = *end;
                *end = p;
                start++;
                end--;
        &#125;

        return OK;
&#125;

/*
*输入字符串逆序输出（递归实现）。
*/
int sort_string(char *string)
&#123;
        int len,i;

        if(*string != '\0')
        &#123;
                sort_string(string++)
                printf("%c\n", *string);
        &#125;
        
        return OK;
&#125;

</code></pre>


<h1 id="三、单链表存储结构："><a href="#三、单链表存储结构：" class="headerlink" title="三、单链表存储结构："></a>三、单链表存储结构：</h1><ul>
<li><strong>节点</strong>（node）：其由数据域和指针域两部分组成。</li>
<li><strong>链表</strong>：多个节点链接成一个线性表。</li>
<li><strong>单链表</strong>：每一个节点指包含一个后继指针域的链表成为单链表。</li>
<li><strong>头指针</strong>：链表中第一个节点存储的位置叫做头指针。</li>
<li><strong>头节点</strong>：单链表第一个节点前附设一个节点，成为头节点，主要方便第一个节点的插入和删除，非必需要素。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
</search>
